/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package minidropbox;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.StringTokenizer;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.filechooser.FileSystemView;
import javax.swing.tree.DefaultMutableTreeNode;

/**
 *
 * @author Absalom Herrera
 */
public class miniDBGUI extends javax.swing.JFrame {

    /**
     * Creates new form miniDBGUI
     */
    public miniDBGUI() {

        initComponents();
        this.setResizable(false);
        BufferedImage img = null;
        try {
            img = ImageIO.read(new File("src/minidropbox/logo.png"));
        } catch (IOException e) {
            e.printStackTrace();
        }
        Image dimg = img.getScaledInstance(logoLabel.getWidth(), logoLabel.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon ic = new ImageIcon(dimg);
        logoLabel.setIcon(ic);
        new FileDrop(System.out, fileTextArea, /*dragBorder,*/ new FileDrop.Listener() {
            public void filesDropped(java.io.File[] files) {
                fileTextArea.setText("");
                for (int i = 0; i < files.length; i++) {
                    try {
                        fileTextArea.append(files[i].getCanonicalPath() + "\n");
                    } // end try
                    catch (java.io.IOException e) {
                    }
                }   // end for: through each dropped file
            }   // end filesDropped
        }); // end FileDrop.Listener
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        downloadButton = new javax.swing.JButton();
        uploadButton = new javax.swing.JButton();
        showButton = new javax.swing.JButton();
        textAreaScroll = new javax.swing.JScrollPane();
        fileTextArea = new javax.swing.JTextArea();
        logoLabel = new javax.swing.JLabel();
        clearButton = new javax.swing.JButton();
        welcomeLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        downloadButton.setText("Download");
        downloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButtonActionPerformed(evt);
            }
        });

        uploadButton.setText("Upload");
        uploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadButtonActionPerformed(evt);
            }
        });

        showButton.setText("Show Files");
        showButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showButtonActionPerformed(evt);
            }
        });

        fileTextArea.setEditable(false);
        fileTextArea.setColumns(20);
        fileTextArea.setRows(5);
        fileTextArea.setText("Drop files here...");
        fileTextArea.setFocusable(false);
        textAreaScroll.setViewportView(fileTextArea);

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        welcomeLabel.setFont(new java.awt.Font("Dubai Light", 1, 18)); // NOI18N
        welcomeLabel.setText("Welcome!");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(uploadButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(downloadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(clearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(showButton))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(textAreaScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(welcomeLabel)))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(welcomeLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 156, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(uploadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(showButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(downloadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearButton)
                        .addGap(32, 32, 32))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(textAreaScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void uploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadButtonActionPerformed
        if (fileTextArea.getText().equals("Drop files here...")) {
            JFileChooser jfc = new JFileChooser();
            jfc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            if (!jfc.isMultiSelectionEnabled()) {
                jfc.setMultiSelectionEnabled(true);
            }
            int r = jfc.showOpenDialog(null);

            if (r == JFileChooser.APPROVE_OPTION) {
                File[] files = jfc.getSelectedFiles();
                c = new ClientDB();
                c.upload(files);
            }
        } else {
            int lineCount = fileTextArea.getLineCount();
            File[] files = new File[lineCount - 1];
            StringTokenizer st1 = new StringTokenizer(fileTextArea.getText(), "\n");
            for (int i = 1; st1.hasMoreTokens(); i++) {
                String path = st1.nextToken();
                files[i - 1] = new File(path);
                //System.out.println("Token "+i+": "+path);
            }
            c = new ClientDB();
            c.upload(files);
            /*for (int i = 0; i < files.length; i++){
                System.out.println(files[i].getName());
            }*/
        }
        fileTextArea.setText("Drop files here...");
    }//GEN-LAST:event_uploadButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        fileTextArea.setText("Drop files here...");
    }//GEN-LAST:event_clearButtonActionPerformed

    private void showButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showButtonActionPerformed
        TreeFiles mytree = c.showFiles();
        JTree tree_swing = mytree.getTree();

        tree_swing.addTreeSelectionListener(new TreeSelectionListener() {
            public void valueChanged(TreeSelectionEvent e) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) e
                        .getPath().getLastPathComponent();
                System.out.println("You selected " + node);
                path_download = node.toString();
            }

        });

        /*JScrollPane scrollP = new JScrollPane(tree_swing);
        this.add(scrollP);
        scrollP.setBorder(BorderFactory.createEmptyBorder()); //How to remove the border of JScrollPane.
        scrollP.setPreferredSize(new Dimension(300, 230));
        this.setLayout(new FlowLayout());*/
        
        JScrollPane treeScroll = new JScrollPane();
        treeScroll.setViewportView(tree_swing);
        treeScroll.setBounds(219, 100, 433, 172);
        this.add (treeScroll);
        //this.add(tree_swing);
        this.repaint();
        //tree_swing.setBounds(200, 200, 500, 400);
    }//GEN-LAST:event_showButtonActionPerformed

    private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadButtonActionPerformed
        JFileChooser jfc = new JFileChooser();
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (jfc.isMultiSelectionEnabled()) {
            jfc.setMultiSelectionEnabled(false);
        }
        int r = jfc.showOpenDialog(null);
        // Using default myDocuments path
        String clientRoute = FileSystemView.getFileSystemView().getDefaultDirectory().getPath();
        if (r == JFileChooser.APPROVE_OPTION) {
            File file = jfc.getSelectedFile();
            // Choosing path
            clientRoute = file.getAbsolutePath();
        }
        downloadFiles(path_download, clientRoute);
    }//GEN-LAST:event_downloadButtonActionPerformed

    public void downloadFiles(String path, String clientRoute) {
        ClientDB c = new ClientDB();
        c.download(path, clientRoute);

    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(miniDBGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(miniDBGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(miniDBGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(miniDBGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new miniDBGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JButton downloadButton;
    private javax.swing.JTextArea fileTextArea;
    private javax.swing.JLabel logoLabel;
    private javax.swing.JButton showButton;
    private javax.swing.JScrollPane textAreaScroll;
    private javax.swing.JButton uploadButton;
    private javax.swing.JLabel welcomeLabel;
    // End of variables declaration//GEN-END:variables
    private ClientDB c;
    String path_download;
}
